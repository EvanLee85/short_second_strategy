# config/data_providers.yaml
# ------------------------------------------------------------
# 目标：无需改代码即可切换/编排数据源与口径（频率/复权/交易日历等）
# 说明：
# - 所有数据源输出必须符合 providers/base.py 约定的统一表结构
# - 优先级从上到下，首个返回“有效数据”的提供器即为当次命中
# - 可通过环境变量覆盖部分参数（如 TuShare 的 TOKEN）
# ------------------------------------------------------------

# ===== 全局默认口径 =====
defaults:
  # 交易所日历（优先用上海 XSHG；后续如需深交所可扩展）
  calendar: "XSHG"            # 可选：XSHG(上交所)/XSHE(深交所) 等
  timezone: "Asia/Shanghai"

  # 频率与复权（仅作为默认值，单次请求可覆盖）
  freq: "1d"                  # 可选：1d/1h/1m
  adjust: "pre"               # 可选：none/pre/post（不复权/前复权/后复权）

  # 缓存策略（单位：秒）
  cache_ttl:
    "1d": 86400               # 日线缓存 1 天
    "1h":  3600               # 小时线缓存 1 小时
    "1m":   300               # 分钟线缓存 5 分钟

  # 容差与清洗规则
  tolerances:
    price_diff_max_pct: 0.03  # 同一时点不同源 close 的允许最大差异（3%）
    min_rows_required: 10     # 认为“有效数据”的最小行数
    drop_non_trading: true    # 丢弃非交易日/会话的记录
    fill_method: null         # 缺失值填充策略：null(不填充)/ffill/bfill

  # 请求重试与节流（所有提供器默认，单源可覆盖）
  request:
    timeout_sec: 15
    retries: 2
    backoff_sec: 1.0          # 退避起始秒
  throttle:
    rps: 8                    # 每秒最大请求数（软限制）

# ===== 数据源优先级 =====
# 顺序决定默认的“主→备”选择：先尝试 akshare；失败落到 tushare；再落到本地 csv；最后 stub
priority:
  - "akshare"
  - "tushare"
  - "csv"
  - "stub"

# ===== 各数据源适配参数 =====
providers:

  # --- AkShare 适配 ---
  akshare:
    enabled: true
    name: "akshare"
    # 频率/复权映射（如适配器内部需要不同参数名，可在代码里做映射）
    supports:
      freq:   ["1d", "1m"]
      adjust: ["none", "pre", "post"]
    request:
      timeout_sec: 15
      retries: 2
      backoff_sec: 1.0
    throttle:
      rps: 8
    proxies: null              # 如需 http/https 代理，填：{"http":"http://127.0.0.1:7890","https":"http://127.0.0.1:7890"}
    notes: "AkShare 免费开源，口径随社区接口变化，建议在真实交易前做抽样校验。"

  # --- TuShare 适配 ---
  tushare:
    enabled: true
    name: "tushare"
    token_env: "TUSHARE_TOKEN" # 从环境变量读取 TuShare TOKEN（export TUSHARE_TOKEN=xxx）
    # 可选：指定 tuShare 的复权口径映射（例：'qfq'->pre, 'hfq'->post）
    adjust_map:
      none: "none"
      pre:  "qfq"
      post: "hfq"
    supports:
      freq:   ["1d", "1m"]
      adjust: ["none", "pre", "post"]
    request:
      timeout_sec: 15
      retries: 2
      backoff_sec: 1.0
    throttle:
      rps: 80                  # 具体限速受账户权限与官方限流影响
    notes: "需有效 TOKEN；分钟级数据权限与配额受账户等级限制。"

  # --- 本地 CSV 适配（离线/回测/回放） ---
  csv:
    enabled: true
    name: "csv"
    # CSV 目录（支持环境变量与相对路径；加载器应做路径展开）
    root_dir: "${PROJECT_ROOT}/data/market_csv"
    # 文件命名模板，可选占位：{symbol}、{freq}
    filename_tpl: "{symbol}_{freq}.csv"
    # 日期时间列与列名映射（若与统一列名不同可在这里声明）
    schema:
      index: "date"            # CSV 中的日期列名
      columns:
        open: "open"
        high: "high"
        low:  "low"
        close:"close"
        volume:"volume"
    # CSV 的时区/日历（若 CSV 已按交易日对齐可保持默认）
    timezone: "Asia/Shanghai"
    calendar: "XSHG"
    notes: "作为兜底或离线调试使用；请保证文件以 UTF-8/无 BOM 保存。"

  # --- Stub 适配（生成假数据用于单元测试） ---
  stub:
    enabled: true
    name: "stub"
    # 生成规则（仅供测试）
    gen:
      rows: 120
      start: "2024-01-01"
      freq: "1d"
      drift_pct_per_step: 0.002   # 每步上升/下降期望
      noise_pct: 0.01             # 噪声波动
    timezone: "Asia/Shanghai"
    calendar: "XSHG"
    notes: "仅用于离线单元测试；严禁用于生产策略评估。"

# ===== 交易日历映射表（可按需扩展）=====
calendars:
  CN: "XSHG"     # 统一中国 A 股口径默认映射到上交所日历
  XSHG: "XSHG"
  XSHE: "XSHE"

# ===== 质量审计（可选：供上层在多源对比时使用）=====
quality:
  # 对比窗口长度（与高优先级源交叉核验用）
  compare_window: 20
  # 若差异超过阈值是否降级切换到下一源
  downgrade_on_diff: true
  # 发现异常时是否写入告警日志
  alert_on_diff: true
